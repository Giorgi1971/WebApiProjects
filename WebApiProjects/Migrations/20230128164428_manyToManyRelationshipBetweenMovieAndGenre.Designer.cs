// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiProjects.Db;

#nullable disable

namespace MoviesDatabase.Api.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20230128164428_manyToManyRelationshipBetweenMovieAndGenre")]
    partial class manyToManyRelationshipBetweenMovieAndGenre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DirectorEntityMovieEntity", b =>
                {
                    b.Property<Guid>("DirectorsDirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DirectorsDirectorId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("DirectorMovies", (string)null);
                });

            modelBuilder.Entity("GenreEntityMovieEntity", b =>
                {
                    b.Property<Guid>("GenresGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresGenreId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("MovieGenres", (string)null);
                });

            modelBuilder.Entity("MoviesDatabase.Api.Db.Entities.DirectorEntity", b =>
                {
                    b.Property<Guid>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MoviesDatabase.Api.Db.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WebApiProjects.Db.Entities.MovieEntity", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("DirectorEntityMovieEntity", b =>
                {
                    b.HasOne("MoviesDatabase.Api.Db.Entities.DirectorEntity", null)
                        .WithMany()
                        .HasForeignKey("DirectorsDirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiProjects.Db.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreEntityMovieEntity", b =>
                {
                    b.HasOne("MoviesDatabase.Api.Db.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiProjects.Db.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
